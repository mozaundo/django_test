import posixpath
from collections import defaultdict

from django.utils.safestring import mark_safe

from .base import Node, Template, TemplateSyntaxError, TextNode, Variable, token_kwargs
from .library import Library

register = Library()

BLOCK_CONTEXT_KEY = "block_context"


class BlockContext:
    def __init__(self):
        # Dictionary of FIFO queues.
        self.blocks = defaultdict(list)

    def __repr__(self):
        return f"<{self.__class__.__qualname__}: blocks={self.blocks!r}>"

    def add_blocks(self, blocks):
        for name, block in blocks.items():
            self.blocks[name].insert(0, block)

    def pop(self, name):
        try:
            return self.blocks[name].pop()
        except IndexError:
            return None

    def push(self, name, block):
        self.blocks[name].append(block)

    def get_block(self, name):
        try:
            return self.blocks[name][-1]
        except IndexError:
            return None


class BlockNode(Node):
    def __init__(self, name, nodelist, parent=None):
        self.name, self.nodelist, self.parent = name, nodelist, parent

    def __repr__(self):
        return "<Block Node: %s. Contents: %r>" % (self.name, self.nodelist)

    def render(self, context):
        block_context = context.render_context.get(BLOCK_CONTEXT_KEY)
        with context.push():
            if block_context is None:
                context["block"] = self
                result = self.nodelist.render(context)
            else:
                push = block = block_context.pop(self.name)
                if block is None:
                    block = self
                # Create new block so we can store context without thread-safety issues.
                block = type(self)(block.name, block.nodelist)
                block.context = context
                context["block"] = block
                result = block.nodelist.render(context)
                if push is not None:
                    block_context.push(self.name, push)
        return result

    def super(self):
        if not hasattr(self, "context"):
            raise TemplateSyntaxError(
                "'%s' object has no attribute 'context'. Did you use "
                "{{ block.super }} in a base template?" % self.__class__.__name__
            )
        render_context = self.context.render_context
        if (
            BLOCK_CONTEXT_KEY in render_context
            and render_context[BLOCK_CONTEXT_KEY].get_block(self.name) is not None
        ):
            return mark_safe(self.render(self.context))
        return ""


class ExtendsNode(Node):
    must_be_first = True
    context_key = "extends_context"

    def __init__(self, nodelist, parent_name, template_dirs=None):
        self.nodelist = nodelist
        self.parent_name = parent_name
        self.template_dirs = template_dirs
        self.blocks = {n.name: n for n in nodelist.get_nodes_by_type(BlockNode)}

    def __repr__(self):
        return "<%s: extends %s>" % (self.__class__.__name__, self.parent_name.token)

    def find_template(self, template_name, context):
        """
        This is a wrapper around engine.find_template(). A history is kept in
        the render_context attribute between successive extends calls and
        passed as the skip argument. This enables extends to work recursively
        without extending the same template twice.
        """
        history = context.render_context.setdefault(
            self.context_key,
            [self.origin],
        )
        template, origin = context.template.engine.find_template(
            template_name,
            skip=history,
        )
        history.append(origin)
        return template

    def get_parent(self, context):
        parent = self.parent_name.resolve(context)
        if not parent:
            error_msg = "Invalid template name in 'extends' tag: %r." % parent
            if self.parent_name.filters or isinstance(self.parent_name.var, Variable):
                error_msg += (
                    " Got this from the '%s' variable." % self.parent_name.token
                )
            raise TemplateSyntaxError(error_msg)
        if isinstance(parent, Template):
            # parent is a django.template.Template
            return parent
        if isinstance(getattr(parent, "template", None), Template):
            # parent is a django.template.backends.django.Template
            return parent.template
        return self.find_template(parent, context)

    def render(self, context):
        compiled_parent = self.get_parent(context)

        if BLOCK_CONTEXT_KEY not in context.render_context:
            context.render_context[BLOCK_CONTEXT_KEY] = BlockContext()
        block_context = context.render_context[BLOCK_CONTEXT_KEY]

        # Add the block nodes from this node to the block context
        block_context.add_blocks(self.blocks)

        # If this block's parent doesn't have an extends node it is the root,
        # and its block nodes also need to be added to the block context.
        for node in compiled_parent.nodelist:
            # The ExtendsNode has to be the first non-text node.
            if not isinstance(node, TextNode):
                if not isinstance(node, ExtendsNode):
                    blocks = {
                        n.name: n
                        for n in compiled_parent.nodelist.get_nodes_by_type(BlockNode)
                    }
                    block_context.add_blocks(blocks)
                break

        # Call Template._render explicitly so the parser context stays
        # the same.
        with context.render_context.push_state(compiled_parent, isolated_context=False):
            return compiled_parent._render(context)


class IncludeNode(Node):
    context_key = "__include_context"

    def __init__(
        self, template, *args, extra_context=None, isolated_context=False, **kwargs
    ):
        self.template = template
        self.extra_context = extra_context or {}
        self.isolated_context = isolated_context
        super().__init__(*args, **kwargs)

    def __repr__(self):
        return f"<{self.__class__.__qualname__}: template={self.template!r}>"

    def render(self, context):
        """
        Render the specified template and context. Cache the template object
        in render_context to avoid reparsing and loading when used in a for
        loop.
        """
        template = self.template.resolve(context)
        # Does this quack like a Template?
        if not callable(getattr(template, "render", None)):
            # If not, try the cache and select_template().
            template_name = template or ()
            if isinstance(template_name, str):
                template_name = (
                    construct_relative_path(
                        self.origin.template_name,
                        template_name,
                    ),
                )
            else:
                template_name = tuple(template_name)
            cache = context.render_context.dicts[0].setdefault(self, {})
            template = cache.get(template_name)
            if template is None:
                template = context.template.engine.select_template(template_name)
                cache[template_name] = template
        # Use the base.Template of a backends.django.Template.
        elif hasattr(template, "template"):
            template = template.template
        values = {
            name: var.resolve(context) for name, var in self.extra_context.items()
        }
        if self.isolated_context:
            return template.render(context.new(values))
        with context.push(**values):
            return template.render(context)


@register.tag("block")
def do_block(parser, token):
    """
    Define a block that can be overridden by child templates.
    """
    # token.split_contents() isn't useful here because this tag doesn't accept
    # variable as arguments.
    bits = token.contents.split()
    if len(bits) != 2:
        raise TemplateSyntaxError("'%s' tag takes only one argument" % bits[0])
    block_name = bits[1]
    # Keep track of the names of BlockNodes found in this template, so we (e[n])&&(t[n]=e[n]),t}),{});Object.keys(t).length>0&&this.setState(t)}}]),t}(h.Component);t.default=v},function(e,t,n){var r=n(645),o=n(365),i=n(128),a=n(147);e.exports=function(e,t,n){return e=a(e),n=null==n?0:r(i(n),0,e.length),t=o(t),e.slice(n,n+t.length)==t}},function(e,t){e.exports=function(e,t,n){return e==e&&(void 0!==n&&(e=e<=n?e:n),void 0!==t&&(e=e>=t?e:t)),e}},function(e,t,n){var r=n(106),o=n(647),i=n(148),a=n(648),s=i((function(e){var t=r(e,a);return t.length&&t[0]===e[0]?o(t):[]}));e.exports=s},function(e,t,n){var r=n(241),o=n(248),i=n(367),a=n(106),s=n(146),u=n(242),l=Math.min;e.exports=function(e,t,n){for(var c=n?i:o,f=e[0].length,d=e.length,p=d,h=Array(d),g=1/0,m=[];p--;){var v=e[p];p&&t&&(v=a(v,s(t))),g=l(v.length,g),h[p]=!n&&(t||f>=120&&v.length>=120)?new r(p&&v):void 0}v=e[0];var y=-1,b=h[0];e:for(;++y<f&&m.length<g;){var A=v[y],_=t?t(A):A;if(A=n||0!==A?A:0,!(b?u(b,_):c(m,_,n))){for(p=d;--p;){var T=h[p];if(!(T?u(T,_):c(e[p],_,n)))continue e}b&&b.push(_),m.push(A)}}return m}},function(e,t,n){var r=n(251);e.exports=function(e){return r(e)?e:[]}},function(e,t,n){e.exports=n(378)},function(e,t,n){var r=n(107);e.exports=function(e){return"function"==typeof e?e:r}},function(e,t,n){"use strict";var r=n(8);Object.defineProperty(t,"__esModule",{value:!0}),t.mergeChildMappings=t.getChildMapping=void 0;var o=r(n(466)),i=r(n(254)),a=r(n(80)),s=r(n(378)),u=r(n(371)),l=r(n(655)),c=n(0);t.getChildMapping=function(e){return(0,l.default)((0,u.default)(c.Children.toArray(e),c.isValidElement),"key")};var f=function(e,t){var n={},r=[];return(0,s.default)((0,a.default)(e),(function(e){(0,i.default)(t,e)?r.length&&(n[e]=r,r=[]):r.push(e)})),[n,r]},d=function(e,t,n){return(0,i.default)(n,e)?n[e]:t[e]};t.mergeChildMappings=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n={},r=f(e,t),u=(0,o.default)(r,2),l=u[0],c=u[1];return(0,s.default)((0,a.default)(t),(function(r){(0,i.default)(l,r)&&(0,s.default)(l[r],(function(r){n[r]=d(r,e,t)})),n[r]=d(r,e,t)})),(0,s.default)(c,(function(r){n[r]=d(r,e,t)})),n}},function(e,t){e.exports=function(e){if(Array.isArray(e))return e},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,s=[],u=!0,l=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(s.push(r.value),s.length!==t);u=!0);}catch(e){l=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(l)throw o}}return s}},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(373),o=n(656)((function(e,t,n){r(e,n,t)}));e.exports=o},function(e,t,n){var r=n(657),o=n(658),i=n(79),a=n(24);e.exports=function(e,t){return function(n,s){var u=a(n)?r:o,l=t?t():{};return u(n,e,i(s,2),l)}}},function(e,t){e.exports=function(e,t,n,r){for(var o=-1,i=null==e?0:e.length;++o<i;){var a=e[o];t(r,a,n(a),e)}return r}},function(e,t,n){var r=n(127);e.exports=function(e,t,n,o){return r(e,(function(e,r,i){t(o,e,n(e),i)})),o}},function(e,t,n){"use strict";var r=n(8);Object.defineProperty(t,"__esModule",{value:!0}),t.isNil=t.findByType=t.someByType=void 0;var o=r(n(455)),i=r(n(370)),a=n(0);t.someByType=function(e,t){return(0,i.default)(a.Children.toArray(e),{type:t})};t.findByType=function(e,t){return(0,o.default)(a.Children.toArray(e),{type:t})};t.isNil=function(e){return null==e||Array.isArray(e)&&0===e.length}},function(e,t,n){"use strict";var r=n(8);Object.defineProperty(t,"__esModule",{value:!0}),t.useWidthProp=t.useVerticalAlignProp=t.useTextAlignProp=t.useMultipleProp=t.useKeyOrValueAndKey=t.useValueAndKey=t.useKeyOnly=void 0;var o=r(n(97)),i=n(379);t.useKeyOnly=function(e,t){return e&&t};var a=function(e,t){return e&&!0!==e&&"".concat(e," ").concat(t)};t.useValueAndKey=a;t.useKeyOrValueAndKey=function(e,t){return e&&(!0===e?t:"".concat(e," ").concat(t))};t.useMultipleProp=function(e,t){return e&&!0!==e?e.replace("large screen","large-screen").replace(/ vertically/g,"-vertically").split(" ").map((function(e){return"".concat(e.replace("-"," ")," ").concat(t)})).join(" "):null};t.useTextAlignProp=function(e){return"justified"===e?"justified":a(e,"aligned")};t.useVerticalAlignProp=function(e){return a(e,"aligned")};t.useWidthProp=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(n&&"equal"===e)return"equal width";var r=(0,o.default)(e);return"string"!==r&&"number"!==r||!t?(0,i.numberToWord)(e):"".concat((0