erticalSection:"",SkypeCircleSlash:"",SkypeSlash:""}};Object(r.hb)(n,t)}function T(e,t){void 0===e&&(e="");var n={style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-17"',src:"url('"+e+"fabric-icons-17-0c4ed701.woff') format('woff')"},icons:{CustomizeToolbar:"",DuplicateRow:"",RemoveFromTrash:"",MailOptions:"",Childof:"",Footer:"",Header:"",BarChartVerticalFill:"",StackedColumnChart2Fill:"",PlainText:"",AccessibiltyChecker:"",DatabaseSync:"",ReservationOrders:"",TabOneColumn:"",TabTwoColumn:"",TabThreeColumn:"",BulletedTreeList:"",MicrosoftTranslatorLogoGreen:"",MicrosoftTranslatorLogoBlue:"",InternalInvestigation:"",AddReaction:"",ContactHeart:"",VisuallyImpaired:"",EventToDoLogo:"",Variable2:"",ModelingView:"",DisconnectVirtualMachine:"",ReportLock:"",Uneditable2:"",Uneditable2Mirrored:"",BarChartVerticalEdit:"",GlobalNavButtonActive:"",PollResults:"",Rerun:"",QandA:"",QandAMirror:"",BookAnswers:"",AlertSettings:"",TrimStart:"",TrimEnd:"",TableComputed:"",DecreaseIndentLegacy:"",IncreaseIndentLegacy:"",SizeLegacy:""}};Object(r.hb)(n,t)}var k=function(){Object(r.gb)("trash","delete"),Object(r.gb)("onedrive","onedrivelogo"),Object(r.gb)("alertsolid12","eventdatemissed12"),Object(r.gb)("sixpointstar","6pointstar"),Object(r.gb)("twelvepointstar","12pointstar"),Object(r.gb)("toggleon","toggleleft"),Object(r.gb)("toggleoff","toggleright")},C=n(8),E=n(87);Object(E.a)("@fluentui/font-icons-mdl2","8.3.3");var _=Object(C.a)();function O(e,t){var n,r;void 0===e&&(e=null!==(r=null===(n=null==_?void 0:_.FabricConfig)||void 0===n?void 0:n.fontBaseUrl)&&void 0!==r?r:"https://spoppe-b.azureedge.net/files/fabric-cdn-prod_20210407.001/assets/icons/"),[o,i,a,l,s,u,c,d,f,h,p,m,b,g,v,y,x,S,T].forEach((function(n){return n(e,t)})),k()}},function(e,t,n){"use strict";n.r(t),n.d(t,"TextField",(function(){return O})),n.d(t,"TextFieldBase",(function(){return S})),n.d(t,"DEFAULT_MASK_CHAR",(function(){return B})),n.d(t,"MaskedTextField",(function(){return F}));var r,o=n(541),i=n(1),a=n(0),l=n(232),s=n(178),u=n(254),c=n(256),d=n(174),f=n(257),h=n(592),p=n(595),m=n(106),b=n(510),g=n(9),v=n(8),y=n(594),x=Object(u.a)(),S=function(e){function t(t){var n=e.call(this,t)||this;n._textElement=a.createRef(),n._onFocus=function(e){n.props.onFocus&&n.props.onFocus(e),n.setState({isFocused:!0},(function(){n.props.validateOnFocusIn&&n._validate(n.value)}))},n._onBlur=function(e){n.props.onBlur&&n.props.onBlur(e),n.setState({isFocused:!1},(function(){n.props.validateOnFocusOut&&n._validate(n.value)}))},n._onRenderLabel=function(e){var t=e.label,r=e.required,o=n._classNames.subComponentStyles?n._classNames.subComponentStyles.label:void 0;return t?a.createElement(l.a,{required:r,htmlFor:n._id,styles:o,disabled:e.disabled,id:n._labelId},e.label):null},n._onRenderDescription=function(e){return e.description?a.createElement("span",{className:n._classNames.description},e.description):null},n._onRevealButtonClick=function(e){n.setState((function(e){return{isRevealingPassword:!e.isRevealingPassword}}))},n._onInputChange=function(e){var t,r,o=e.target.value,i=T(n.props,n.state)||"";void 0!==o&&o!==n._lastChangeValue&&o!==i?(n._lastChangeValue=o,null===(r=(t=n.props).onChange)||void 0===r||r.call(t,e,o),n._isControlled||n.setState({uncontrolledValue:o})):n._lastChangeValue=void 0},Object(c.a)(n),n._async=new d.a(n),n._fallbackId=Object(f.a)("TextField"),n._descriptionId=Object(f.a)("TextFieldDescription"),n._labelId=Object(f.a)("TextFieldLabel"),n._prefixId=Object(f.a)("TextFieldPrefix"),n._suffixId=Object(f.a)("TextFieldSuffix"),n._warnControlledUsage();var r=t.defaultValue,o=void 0===r?"":r;return"number"==typeof o&&(o=String(o)),n.state={uncontrolledValue:n._isControlled?void 0:o,isFocused:!1,errorMessage:""},n._delayedValidate=n._async.debounce(n._validate,n.props.deferredValidationTime),n._lastValidation=0,n}return Object(i.c)(t,e),Object.defineProperty(t.prototype,"value",{get:function(){return T(this.props,this.state)},enumerable:!1,configurable:!0}),t.prototype.componentDidMount=function(){this._adjustInputHeight(),this.props.validateOnLoad&&this._validate(this.value)},t.prototype.componentWillUnmount=function(){this._async.dispose()},t.prototype.getSnapshotBeforeUpdate=function(e,t){return{selection:[this.selectionStart,this.selectionEnd]}},t.prototype.componentDidUpdate=function(e,t,n){var r=this.props,o=(n||{}).selection,i=void 0===o?[null,null]:o,a=i[0],l=i[1];!!e.multiline!=!!r.multiline&&t.isFocused&&(this.focus(),null!==a&&null!==l&&a>=0&&l>=0&&this.setSelectionRange(a,l)),e.value!==r.value&&(this._lastChangeValue=void 0);var s=T(e,t),u=this.value;s!==u&&(this._warnControlledUsage(e),this.state.errorMessage&&!r.errorMessage&&this.setState({errorMessage:""}),this._adjustInputHeight(),k(r)&&this._delayedValidate(u))},t.prototype.render=function(){var e=this.props,t=e.borderless,n=e.className,o=e.disabled,l=e.invalid,u=e.iconProps,c=e.inputClassName,d=e.label,f=e.multiline,p=e.required,m=e.underlined,b=e.prefix,g=e.resizable,S=e.suffix,T=e.theme,k=e.styles,C=e.autoAdjustHeight,E=e.canRevealPassword,_=e.revealPasswordAriaLabel,O=e.type,w=e.onRenderPrefix,A=void 0===w?this._onRenderPrefix:w,I=e.onRenderSuffix,j=void 0===I?this._onRenderSuffix:I,L=e.onRenderLabel,M=void 0===L?this._onRenderLabel:L,P=e.onRenderDescription,D=void 0===P?this._onRenderDescription:P,N=this.state,B=N.isFocused,F=N.isRevealingPassword,R=this._errorMessage,z="boolean"==typeof l?l:!!R,H=!!E&&"password"===O&&function(){if("boolean"!=typeof r){var e=Object(v.a)();if(null==e?void 0:e.navigator){var t=/^Edg/.test(e.navigator.userAgent||"");r=!(Object(y.a)()||t)}else r=!0}return r}(),V=this._classNames=x(k,{theme:T,className:n,disabled:o,focused:B,required:p,multiline:f,hasLabel:!!d,hasErrorMessage:z,borderless:t,resizable:g,hasIcon:!!u,underlined:m,inputClassName:c,autoAdjustHeight:C,hasRevealButton:H});return a.createElement("div",{ref:this.props.elementRef,className:V.root},a.createElement("div",{className:V.wrapper},M(this.props,this._onRenderLabel),a.createElement("div",{className:V.fieldGroup},(void 0!==b||this.props.onRenderPrefix)&&a.createElement("div",{className:V.prefix,id:this._prefixId},A(this.props,this._onRenderPrefix)),f?this._renderTextArea():this._renderInput(),u&&a.createElement(s.a,Object(i.a)({className:V.icon},u)),H&&a.createElement("button",{"aria-label":_,className:V.revealButton,onClick:this._onRevealButtonClick,"aria-pressed":!!F,type:"button"},a.createElement("span",{className:V.revealSpan},a.createElement(s.a,{className:V.revealIcon,iconName:F?"Hide":"RedEye"}))),(void 0!==S||this.props.onRenderSuffix)&&a.createElement("div",{className:V.suffix,id:this._suffixId},j(this.props,this._onRenderSuffix)))),this._isDescriptionAvailable&&a.createElement("span",{id:this._descriptionId},D(this.props,this._onRenderDescription),R&&a.createElement("div",{role:"alert"},a.createElement(h.a,null,this._renderErrorMessage()))))},t.prototype.focus=function(){this._textElement.current&&this._textElement.current.focus()},t.prototype.blur=function(){this._textElement.current&&this._textElement.current.blur()},t.prototype.select=function(){this._textElement.current&&this._textElement.current.select()},t.prototype.setSelectionStart=function(e){this._textElement.current&&(this._textElement.current.selectionStart=e)},t.prototype.setSelectionEnd=function(e){this._textElement.current&&(this._textElement.current.selectionEnd=e)},Object.defineProperty(t.prototype,"selectionStart",{get:function(){return this._textElement.current?this._textElement.current.selectionStart:-1},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"selectionEnd",{get:function(){return this._textElement.current?this._textElement.current.selectionEnd:-1},enumerable:!1,configurable:!0}),t.prototype.setSelectionRange=function(e,t){this._textElement.current&&this._textElement.current.setSelectionRange(e,t)},t.prototype._warnControlledUsage=function(e){Object(p.b)({componentId:this._id,componentName:"TextField",props:this.props,oldProps:e,valueProp:"value",defaultValueProp:"defaultValue",onChangeProp:"onChange",readOnlyProp:"readOnly"}),null!==this.props.value||this._hasWarnedNullValue||(this._hasWarnedNullValue=!0,Object(m.b)("Warning: 'value' prop on 'TextField' should not be null. Consider using an empty string to clear the component or undefined to indicate an uncontrolled component."))},Object.defineProperty(t.prototype,"_id",{get:function(){return this.props.id||this._fallbackId},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"_isControlled",{get:function(){return Object(b.a)(this.props,"value")},enumerable:!1,configurable:!0}),t.prototype._onRenderPrefix=function(e){var t=e.prefix;return a.createElement("span",{style:{paddingBottom:"1px"}},t)},t.prototype._onRenderSuffix=function(e){var t=e.suffix;return a.createElement("span",{style:{paddingBottom:"1px"}},t)},Object.defineProperty(t.prototype,"_errorMessage",{get:function(){var e=this.props.errorMessage;return(void 0===e?this.state.errorMessage:e)||""},enumerable:!1,configurable:!0}),t.prototype._renderErrorMessage=function(){var e=this._errorMessage;return e?"string"==typeof e?a.createElement("p",{className:this._classNames.errorMessage},a.createElement("span",{"data-automation-id":"error-message"},e)):a.createElement("div",{className:this._classNames.errorMessage,"data-automation-id":"error-message"},e):null},Object.defineProperty(t.prototype,"_isDescriptionAvailable",{get:function(){var e=this.props;return!!(e.onRenderDescription||e.description||this._errorMessage)},enumerable:!1,configurable:!0}),t.prototype._renderTextArea=function(){var e=this.props.invalid,t=void 0===e?!!this._errorMessage:e,n=Object(g.j)(this.props,g.w,["defaultValue"]),r=this.props["aria-labelledby"]||(this.props.label?this._labelId:void 0);return a.createElement("textarea",Object(i.a)({id:this._id},n,{ref:this._textElement,value:this.value||"",onInput:this._onInputChange,onChange:this._onInputChange,className:this._classNames.field,"aria-labelledby":r,"aria-describedby":this._isDescriptionAvailable?this._descriptionId:this.props["aria-describedby"],"aria-invalid":t,"aria-label":this.props.ariaLabel,readOnly:this.props.readOnly,onFocus:this._onFocus,onBlur:this._onBlur}))},t.prototype._renderInput=function(){var e=this.props,t=e.ariaLabel,n=e.invalid,r=void 0===n?!!this._errorMessage:n,o=e.onRenderPrefix,l=e.onRenderSuffix,s=e.prefix,u=e.suffix,c=e.type,d=void 0===c?"text":c,f=[];e.label&&f.push(this._labelId),(void 0!==s||o)&&f.push(this._prefixId),(void 0!==u||l)&&f.push(this._suffixId);var h=Object(i.a)(Object(i.a)({type:this.state.isRevealingPassword?"text":d,id:this._id},Object(g.j)(this.props,g.o,["defaultValue","type"])),{"aria-labelledby":this.props["aria-labelledby"]||(f.length>0?f.join(" "):void 0),ref:this._textElement,value:this.value||"",onInput:this._onInputChange,onChange:this._onInputChange,className:this._classNames.field,"aria-label":t,"aria-describedby":this._isDescriptionAvailable?this._descriptionId:this.props["aria-describedby"],"aria-invalid":r,onFocus:this._onFocus,onBlur:this._onBlur}),p=function(e){return a.createElement("input",Object(i.a)({},e))};return(this.props.onRenderInput||p)(h,p)},t.prototype._validate=function(e){var t=this;if(this._latestValidateValue!==e||!k(this.props)){this._latestValidateValue=e;var n=this.props.onGetErrorMessage,r=n&&n(e||"");if(void 0!==r)if("string"!=typeof r&&"then"in r){var o=++this._lastValidation;r.then((function(n){o===t._lastValidation&&t.setState({errorMessage:n}),t._notifyAfterValidate(e,n)}))}else this.setState({errorMessage:r}),this._notifyAfterValidate(e,r);else this._notifyAfterValidate(e,"")}},t.prototype._notifyAfterValidate=function(e,t){e===this.value&&this.props.onNotifyValidationResult&&this.props.onNotifyValidationResult(t,e)},t.prototype._adjustInputHeight=function(){if(this._textElement.current&&this.props.autoAdjustHeight&&this.props.multiline){var e=this._textElement.current;e.style.height="",e.style.height=e.scrollHeight+"px"}},t.defaultProps={resizable:!0,d
        self.errors = BytesIO()

    def _base_environ(self, **request):
        """
        The base environment for a request.
        """
        # This is a minimal valid WSGI environ dictionary, plus:
        # - HTTP_COOKIE: for cookie support,
        # - REMOTE_ADDR: often useful, see #8551.
        # See https://www.python.org/dev/peps/pep-3333/#environ-variables
        return {
            "HTTP_COOKIE": "; ".join(
                sorted(
                    "%s=%s" % (morsel.key, morsel.coded_value)
                    for morsel in self.cookies.values()
                )
            ),
            "PATH_INFO": "/",
            "REMOTE_ADDR": "127.0.0.1",
            "REQUEST_METHOD": "GET",
            "SCRIPT_NAME": "",
            "SERVER_NAME": "testserver",
            "SERVER_PORT": "80",
            "SERVER_PROTOCOL": "HTTP/1.1",
            "wsgi.version": (1, 0),
            "wsgi.url_scheme": "http",
            "wsgi.input": FakePayload(b""),
            "wsgi.errors": self.errors,
            "wsgi.multiprocess": True,
            "wsgi.multithread": False,
            "wsgi.run_once": False,
            **self.defaults,
            **request,
        }

    def request(self, **request):
        "Construct a generic request object."
        return WSGIRequest(self._base_environ(**request))

    def _encode_data(self, data, content_type):
        if content_type is MULTIPART_CONTENT:
            return encode_multipart(BOUNDARY, data)
        else:
            # Encode the content so that the byte representation is correct.
            match = CONTENT_TYPE_RE.match(content_type)
            if match:
                charset = match[1]
            else:
                charset = settings.DEFAULT_CHARSET
            return force_bytes(data, encoding=charset)

    def _encode_json(self, data, content_type):
        """
        Return encoded JSON if data is a dict, list, or tuple and content_type
        is application/json.
        """
        should_encode = JSON_CONTENT_TYPE_RE.match(content_type) and isinstance(
            data, (dict, list, tuple)
        )
        return json.dumps(data, cls=self.json_encoder) if should_encode else data

    def _get_path(self, parsed):
        path = parsed.path
        # If there are parameters, add them
        if parsed.params:
            path += ";" + parsed.params
        path = unquote_to_bytes(path)
        # Replace the behavior where non-ASCII values in the WSGI environ are
        # arbitrarily decoded with ISO-8859-1.
        # Refs comment in `get_bytes_from_wsgi()`.
        return path.decode("iso-8859-1")

    def get(self, path, data=None, secure=False, **extra):
        """Construct a GET request."""
        data = {} if data is None else data
        return self.generic(
            "GET",
            path,
            secure=secure,
            **{
                "QUERY_STRING": urlencode(data, doseq=True),
                **extra,
            },
        )

    def post(
        self, path, data=None, content_type=MULTIPART_CONTENT, secure=False, **extra
    ):
        """Construct a POST request."""
        data = self._encode_json({} if data is None else data, content_type)
        post_data = self._encode_data(data, content_type)

        return self.generic(
            "POST", path, post_data, content_type, secure=secure, **extra
        )

    def head(self, path, data=None, secure=False, **extra):
        """Construct a HEAD request."""
        data = {} if data is None else data
        return self.generic(
            "HEAD",
            path,
            secure=secure,
            **{
                "QUERY_STRING": urlencode(data, doseq=True),
                **extra,
            },
        )

    def trace(self, path, secure=False, **extra):
        """Construct a TRACE request."""
        return self.generic("TRACE", path, secure=secure, **extra)

    def options(
        self,
        path,
        data="",
        content_type="application/octet-stream",
        secure=False,
        **extra,
    ):
        "Construct an OPTIONS request."
        return self.generic("OPTIONS", path, data, content_type, secure=secure, **extra)

    def put(
        self,
        path,
        data="",
        content_type="application/octet-stream",
        secure=False,
        **extra,
    ):
        """Construct a PUT request."""
        data = self._encode_json(data, content_type)
        return self.generic("PUT", path, data, content_type, secure=secure, **extra)

    def patch(
        self,
        path,
        data="",
        content_type="application/octet-stream",
        secure=False,
        **extra,
    ):
        """Construct a PATCH request."""
        data = self._encode_json(data, content_type)
        return self.generic("PATCH", path, data, content_type, secure=secure, **extra)

    def delete(
        self,
        path,
        data="",
        content_type="application/octet-stream",
        secure=False,
        **extra,
    ):
        """Construct a DELETE request."""
        data = self._encode_json(data, content_type)
        return self.generic("DELETE", path, data, content_type, secure=secure, **extra)

    def generic(
        self,
        method,
        path,
        data="",
        content_type="application/octet-stream",
        secure=False,
        **extra,
    ):
        """Construct an arbitrary HTTP request."""
        parsed = urlparse(str(path))  # path can be lazy
        data = force_bytes(data, settings.DEFAULT_CHARSET)
        r = {
            "PATH_INFO": self._get_path(parsed),
            "REQUEST_METHOD": method,
            "SERVER_PORT": "443" if secure else "80",
            "wsgi.url_scheme": "https" if secure else "http",
        }
        if data:
            r.update(
                {
                    "CONTENT_LENGTH": str(len(data)),
                    "CONTENT_TYPE": content_type,
                    "wsgi.input": FakePayload(data),
                }
            )
        r.update(extra)
        # If QUERY_STRING is absent or empty, we want to extract it from the URL.
        if not r.get("QUERY_STRING"):
            # WSGI requires latin-1 encoded strings. See get_path_info().
            query_string = parsed[4].encode().decode("iso-8859-1")
            r["QUERY_STRING"] = query_string
        return self.request(**r)


class AsyncRequestFactory(RequestFactory):
    """
    Class that lets you create mock ASGI-like Request objects for use in
    testing. Usage:

    rf = AsyncRequestFactory()
    get_request = await rf.get('/hello/')
    post_request = await rf.post('/submit/', {'foo': 'bar'})

    Once you have a request object you can pass it to any view function,
    including synchronous ones. The reason we have a separate class here is:
    a) this makes ASGIRequest subclasses, and
    b) AsyncTestClient can subclass it.
    """

    def _base_scope(self, **request):
        """The base scope for a request."""
        # This is a minimal valid ASGI scope, plus:
        # - headers['cookie'] for cookie support,
        # - 'client' often useful, see #8551.
        scope = {
            "asgi": {"version": "3.0"},
            "type": "http",
            "http_version": "1.1",
            "client": ["127.0.0.1", 0],
            "server": ("testserver", "80"),
            "scheme": "http",
            "method": "GET",
            "headers": [],
            **self.defaults,
            **request,
        }
        scope["headers"].append(
            (
                b"cookie",
                b"; ".join(
                    sorted(
                        ("%s=%s" % (morsel.key, morsel.coded_value)).encode("ascii")
                        for morsel in self.cookies.values()
                    )
                ),
            )
        )
        return scope

    def request(self, **request):
        """Construct a generic request object."""
        # This is synchronous, which means all methods on this class are.
        # AsyncClient, however, has an async request function, which makes all
        # its methods async.
        if "_body_file" in request:
            body_file = request.pop("_body_file")
        else:
            body_file = FakePayload("")
        return ASGIRequest(self._base_scope(**request), body_file)

    def generic(
        self,
        method,
        path,
        data="",
        content_type="application/octet-stream",
        secure=False,
        **extra,
    ):
        """Construct an arbitrary HTTP request."""
        parsed = urlparse(str(path))  # path can be lazy.
        data = force_bytes(data, settings.DEFAULT_CHARSET)
        s = {
            "method": method,
            "path": self._get_path(parsed),
            "server": ("127.0.0.1", "443" if secure else "80"),
            "scheme": "https" if secure else "http",
            "headers": [(b"host", b"testserver")],
        }
        if data:
            s["headers"].extend(
                [
                    (b"content-length", str(len(data)).encode("ascii")),
                    (b"content-type", content_type.encode("ascii")),
                ]
            )
            s["_body_file"] = FakePayload(data)
        follow = extra.pop("follow", None)
        if follow is not None:
            s["follow"] = follow
        if query_string := extra.pop("QUERY_STRING", None):
            s["query_string"] = query_string
        s["headers"] += [
            (key.lower().encode("ascii"), value.encode("latin1"))
            for key, value in extra.items()
        ]
        # If QUERY_STRING is absent or empty, we want to extract it from the
        # URL.
        if not s.get("query_string"):
            s["query_string"] = parsed[4]
        return self.request(**s)


class ClientMixin:
    """
    Mixin with common methods between Client and AsyncClient.
    """

    def store_exc_info(self, **kwargs):
        """Store exceptions when they are generated by a view."""
        self.exc_info = sys.exc_info()

    def check_exception(self, response):
        """
        Look for a signaled exception, clear the current context exception
        data, re-raise the signaled exception, and clear the signaled exception
        from the local cache.
        """
        response.exc_info = self.exc_info
        if self.exc_info:
            _, exc_value, _ = self.exc_info
            self.exc_info = None
            if self.raise_request_exception:
                raise exc_value

    @property
    def session(self):
        """Return the current session variables."""
        engine = import_module(settings.SESSION_ENGINE)
        cookie = self.cookies.get(settings.SESSION_COOKIE_NAME)
        if cookie:
            return engine.SessionStore(cookie.value)
        session = engine.SessionStore()
        session.save()
        self.cookies[settings.SESSION_COOKIE_NAME] = session.session_key
        return session

    def login(self, **credentials):
        """
        Set the Factory to appear as if it has successfully logged into a site.

        Return True if login is possible or False if the provided credentials
        are incorrect.
        """
        from django.contrib.auth import authenticate

        user = authenticate(**credentials)
        if user:
            self._login(user)
            return True
        return False

    def force_login(self, user, backend=None):
        def get_backend():
            from django.contrib.auth import load_backend

            for backend_path in settings.AUTHENTICATION_BACKENDS:
                backend = load_backend(backend_path)
                if hasattr(backend, "get_user"):
                    return backend_path

        if backend is None:
            backend = get_backend()
        user.backend = backend
        self._login(user, backend)

    def _login(self, user, backend=None):
        from django.contrib.auth import login

        # Create a fake request to store login details.
        request = HttpRequest()
        if self.session:
            request.session = self.session
        else:
            engine = import_module(settings.SESSION_ENGINE)
            request.session = engine.SessionStore()
        login(request, user, backend)
        # Save the session values.
        request.session.save()
        # Set the cookie to represent the session.
        session_cookie = settings.SESSION_COOKIE_NAME
        self.cookies[session_cookie] = request.session.session_key
        cookie_data = {
            "max-age": None,
            "path": "/",
            "domain": settings.SESSION_COOKIE_DOMAIN,
            "secure": settings.SESSION_COOKIE_SECURE or None,
            "expires": None,
        }
        self.cookies[session_cookie].update(cookie_data)

    def logout(self):
        """Log out the user by removing the cookies and session object."""
        from django.contrib.auth import get_user, logout

        request = HttpRequest()
        if self.session:
            request.session = self.session
            request.user = get_user(request)
        else:
            engine = import_module(settings.SESSION_ENGINE)
            request.session = engine.SessionStore()
        logout(request)
        self.cookies = SimpleCookie()

    def _parse_json(self, response, **extra):
        if not hasattr(response, "_json"):
            if not JSON_CONTENT_TYPE_RE.match(response.get("Content-Type")):
                raise ValueError(
                    'Content-Type header is "%s", not "application/json"'
                    % response.get("Content-Type")
                )
            response._json = json.loads(
                response.content.decode(response.charset), **extra
            )
        return response._json


class Client(ClientMixin, RequestFactory):
    """
    A class that can act as a client for testing purposes.

    It allows the user to compose GET and POST requests, and
    obtain the response that the server gave to those requests.
    The server Response objects are annotated with the details
    of the contexts and templates that were rendered during the
    process of serving the request.

    Client objects are stateful - they will retain cookie (and
    thus session) details for the lifetime of the Client instance.

    This is not intended as a replacement for Twill/Selenium or
    the like - it is here to allow testing against the
    contexts and templates produced by a view, rather than the
    HTML rendered to the end-user.
    """

    def __init__(
        self, enforce_csrf_checks=False, raise_request_exception=True, **defaults
    ):
        super().__init__(**defaults)
        self.handler = ClientHandler(enforce_csrf_checks)
        self.raise_request_exception = raise_request_exception
        self.exc_info = None
        self.extra = None

    def request(self, **request):
        """
        Make a generic request. Compose the environment dictionary and pass
        to the handler, return the result of the handler. Assume defaults for
        the query environment, which can be overridden using the arguments to
        the request.
        """
        environ = self._base_environ(**request)

        # Curry a data dictionary into an instance of the template renderer
        # callback function.
        data = {}
        on_template_render = partial(store_rendered_templates, data)
        signal_uid = "template-render-%s" % id(request)
        signals.template_rendered.connect(on_template_render, dispatch_uid=signal_uid)
        # Capture exceptions created by the handler.
        exception_uid = "request-exception-%s" % id(request)
        got_request_exception.connect(self.store_exc_info, dispatch_uid=exception_uid)
        try:
            response = self.handler(environ)
        finally:
            signals.template_rendered.disconnect(dispatch_uid=signal_uid)
            got_request_exception.disconnect(dispatch_uid=exception_uid)
        # Check for signaled exceptions.
        self.check_exception(response)
        # Save the client and request that stimulated the response.
        response.client = self
        response.request = request
        # Add any rendered template detail to the response.
        response.templates = data.get("templates", [])
        response.context = data.get("context")
        response.json = partial(self._parse_json, response)
        # Attach the ResolverMatch instance to the response.
        urlconf = getattr(response.wsgi_request, "urlconf", None)
        response.resolver_match = SimpleLazyObject(
            lambda: resolve(request["PATH_INFO"], urlconf=urlconf),
        )
        # Flatten a single context. Not really necessary anymore thanks to the
        # __getattr__ flattening in ContextList, but has some edge case
        # backwards compatibility implications.
        if response.context and len(response.context) == 1:
            response.context = response.context[0]
        # Update persistent cookie data.
        if response.cookies:
            self.cookies.update(response.cookies)
        return response

    def get(self, path, data=None, follow=False, secure=False, **extra):
        """Request a response from the server using GET."""
        self.extra = extra
        response = super().get(path, data=data, secure=secure, **extra)
        if follow:
            response = self._handle_redirects(response, data=data, **extra)
        return response

    def post(
        self,
        path,
        data=None,
        content_type=MULTIPART_CONTENT,
        follow=False,
        secure=False,
        **extra,
    ):
        """Request a response from the server using POST."""
        self.extra = extra
        response = super().post(
            path, data=data, content_type=content_type, secure=secure, **extra
        )
        if follow:
            response = self._handle_redirects(
                response, data=data, content_type=content_type, **extra
            )
        return response

    def head(self, path, data=None, follow=False, secure=False, **extra):
        """Request a response from the server using HEAD."""
        self.extra = extra
        response = super().head(path, data=data, secure=secure, **extra)
        if follow:
            response = self._handle_redirects(response, data=data, **extra)
        return response

    def options(
        self,
        path,
        data="",
        content_type="application/octet-stream",
        follow=False,
        secure=False,
        **extra,
    ):
        """Request a response from the server using OPTIONS."""
        self.extra = extra
        response = super().options(
            path, data=data, content_type=content_type, secure=secure, **extra
        )
        if follow:
            response = self._handle_redirects(
                response, data=data, content_type=content_type, **extra
            )
        return response

    def put(
        self,
        path,
        data="",
        content_type="application/octet-stream",
        follow=False,
        secure=False,
        **extra,
    ):
        """Send a resource to the server using PUT."""
        self.extra = extra
        response = super().put(
            path, data=data, content_type=content_type, secure=secure, **extra
        )
        if follow:
            response = self._handle_redirects(
                response, data=data, content_type=content_type, **extra
            )
        return response

    def patch(
        self,
        path,
        data="",
        content_type="application/octet-stream",
        follow=False,
        secure=False,
        **extra,
    ):
        """Send a resource to the server using PATCH."""
        self.extra = extra
        response = super().patch(
            path, data=data, content_type=content_type, secure=secure, **extra
        )
        if follow:
            response = self._handle_redirects(
                response, data=data, content_type=content_type, **extra
            )
        return response

    def delete(
        self,
        path,
        data="",
        content_type="application/octet-stream",
        follow=False,
        secure=False,
        **extra,
    ):
        """Send a DELETE request to the server."""
        self.extra = extra
        response = super().delete(
            path, data=data, content_type=content_type, secure=secure, **extra
        )
        if follow:
            response = self._handle_redirects(
                response, data=data, content_type=content_type, **extra
            )
        return response

    def trace(self, path, data="", follow=False, secure=False, **extra):
        """Send a TRACE request to the server."""
        self.extra = extra
        response = super().trace(path, data=data, secure=secure, **extra)
        if follow:
            response = self._handle_redirects(response, data=data, **extra)
        return response

    def _handle_redirects(self, response, data="", content_type="", **extra):
        """
        Follow any redirects by requesting responses from the server using GET.
        """
        response.redirect_chain = []
        redirect_status_codes = (
            HTTPStatus.MOVED_PERMANENTLY,
            HTTPStatus.FOUND,
            HTTPStatus.SEE_OTHER,
            HTTPStatus.TEMPORARY_REDIRECT,
            HTTPStatus.PERMANENT_REDIRECT,
        )
        while response.status_code in redirect_status_codes:
            response_url = response.url
            redirect_chain = response.redirect_chain
            redirect_chain.append((response_url, response.status_code))

            url = urlsplit(response_url)
            if url.scheme:
                extra["wsgi.url_scheme"] = url.scheme
            if url.hostname:
                extra["SERVER_NAME"] = url.hostname
            if url.port:
                extra["SERVER_PORT"] = str(url.port)

            path = url.path
            # RFC 2616: bare domains without path are treated as the root.
            if not path and url.netloc:
                path = "/"
            # Prepend the request path to handle relative path redirects
            if not path.startswith("/"):
                path = urljoin(response.request["PATH_INFO"], path)

            if response.status_code in (
                HTTPStatus.TEMPORARY_REDIRECT,
                HTTPStatus.PERMANENT_REDIRECT,
            ):
                # Preserve request method and query string (if needed)
                # post-redirect for 307/308 responses.
                request_method = response.request["REQUEST_METHOD"].lower()
                if request_method not in ("get", "head"):
                    extra["QUERY_STRING"] = url.query
                request_method = getattr(self, request_method)
            else:
                request_method = self.get
                data = QueryDict(url.query)
                content_type = None

            response = request_method(
                path, data=data, content_type=content_type, follow=False, **extra
            )
            response.redirect_chain = redirect_chain

            if redirect_chain[-1] in redirect_chain[:-1]:
                # Check that we're not redirecting to somewhere we've already
                # been to, to prevent loops.
                raise RedirectCycleError(
                    "Redirect loop detected.", last_response=response
                )
            if len(redirect_chain) > 20:
                # Such a lengthy chain likely also means a loop, but one with
                # a growing path, changing view, or changing query argument;
                # 20 is the value of "network.http.redirection-limit" from Firefox.
                raise RedirectCycleError("Too many redirects.", last_response=response)

        return response


class AsyncClient(ClientMixin, AsyncRequestFactory):
    """
    An async version of Client that creates ASGIRequests and calls through an
    async request path.

    Does not currently support "follow" on its methods.
    """

    def __init__(
        self, enforce_csrf_checks=False, raise_request_exception=True, **defaults
    ):
        super().__init__(**defaults)
        self.handler = AsyncClientHandler(enforce_csrf_checks)
        self.raise_request_exception = raise_request_exception
        self.exc_info = None
        self.extra = None

    async def request(self, **request):
        """
        Make a generic request. Compose the scope dictionary and pass to the
        handler, return the result of the handler. Assume defaults for the
        query environment, which can be overridden using the arguments to the
        request.
        """
        if "follow" in request:
            raise NotImplementedError(
                "AsyncClient request methods do not accept the follow parameter."
            )
        scope = self._base_scope(**request)
        # Curry a data dictionary into an instance of the template renderer
        # callback function.
        data = {}
        on_template_render = partial(store_rendered_templates, data)
        signal_uid = "template-render-%s" % id(request)
        signals.template_rendered.connect(on_template_render, dispatch_uid=signal_uid)
        # Capture exceptions created by the handler.
        exception_uid = "request-exception-%s" % id(request)
        got_request_exception.connect(self.store_exc_info, dispatch_uid=exception_uid)
        try:
            response = await self.handler(scope)
        finally:
            signals.template_rendered.disconnect(dispatch_uid=signal_uid)
            got_request_exception.disconnect(dispatch_uid=exception_uid)
        # Check for signaled exceptions.
        self.check_exception(response)
        # Save the client and request that stimulated the response.
        response.client = self
        response.request = request
        # Add any rendered template detail to the response.
        response.templates = data.get("templates", [])
        response.context = data.get("context")
        response.json = partial(self._parse_json, response)
        # Attach the ResolverMatch instance to the response.
        urlconf = getattr(response.asgi_request, "urlconf", None)
        response.resolver_match = SimpleLazyObject(
            lambda: resolve(request["path"], urlconf=urlconf),
        )
        # Flatten a single context. Not really necessary anymore thanks to the
        # __getattr__ flattening in ContextList, but has some edge case
        # backwards compatibility implications.
        if response.context and len(response.context) == 1:
            response.context = response.context[0]
        # Update persistent cookie data.
        if response.cookies:
            self.cookies.update(response.cookies)
        return response
