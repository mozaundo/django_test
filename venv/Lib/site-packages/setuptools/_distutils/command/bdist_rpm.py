"""distutils.command.bdist_rpm

Implements the Distutils 'bdist_rpm' command (create RPM source and binary
distributions)."""

import subprocess
import sys
import os

from distutils.core import Command
from distutils.debug import DEBUG
from distutils.file_util import write_file
from distutils.errors import (
    DistutilsOptionError,
    DistutilsPlatformError,
    DistutilsFileError,
    DistutilsExecError,
)
from distutils.sysconfig import get_python_version
from distutils import log


class bdist_rpm(Command):

    description = "create an RPM distribution"

    user_options = [
        ('bdist-base=', None, "base directory for creating built distributions"),
        (
            'rpm-base=',
            None,
            "base directory for creating RPMs (defaults to \"rpm\" under "
            "--bdist-base; must be specified for RPM 2)",
        ),
        (
            'dist-dir=',
            'd',
            "directory to put final RPM files in " "(and .spec files if --spec-only)",
        ),
        (
            'python=',
            None,
            "path to Python interpreter to hard-code in the .spec file "
            "(default: \"python\")",
        ),
        (
            'fix-python',
            None,
            "hard-code the exact path to the current Python interpreter in "
            "the .spec file",
        ),
        ('spec-only', None, "only regenerate spec file"),
        ('source-only', None, "only generate source RPM"),
        ('binary-only', None, "only generate binary RPM"),
        ('use-bzip2', None, "use bzip2 instead of gzip to create source distribution"),
        # More meta-data: too RPM-specific to put in the setup script,
        # but needs to go in the .spec file -- so we make these options
        # to "bdist_rpm".  The idea is that packagers would put this
        # info in setup.cfg, although they are of course free to
        # supply it on the command line.
        (
            'distribution-name=',
            None,
            "name of the (Linux) distribution to which this "
            "RPM applies (*not* the name of the module distribution!)",
        ),
        ('group=', None, "package classification [default: \"Development/Libraries\"]"),
        ('release=', None, "RPM release number"),
        ('serial=', None, "RPM serial number"),
        (
            'vendor=',
            None,
            "RPM \"vendor\" (eg. \"Joe Blow <joe@example.com>\") "
            "[default: maintainer or author from setup script]",
        ),
        (
            'packager=',
            None,
            "RPM packager (eg. \"Jane Doe <jane@example.net>\") " "[default: vendor]",
        ),
        ('doc-files=', None, "list of documentation files (space or comma-separated)"),
        ('changelog=', None, "RPM changelog"),
        ('icon=', None, "name of icon file"),
        ('provides=', None, "capabilities provided by this package"),
        ('requires=', None, "capabilities required by this package"),
        ('conflicts=', None, "capabilities which conflict with this package"),
        ('build-requires=', None, "capabilities required to build this package"),
        ('obsoletes=', None, "capabilities made obsolete by this package"),
        ('no-autoreq', None, "do not automatically calculate dependencies"),
        # Actions to take when building RPM
        ('keep-temp', 'k', "don't clean up RPM build directory"),
        ('no-keep-temp', None, "clean up RPM build directory [default]"),
        (
            'use-rpm-opt-flags',
            None,
            "compile with RPM_OPT_FLAGS when building from source RPM",
        ),
        ('no-rpm-opt-flags', None, "do not pass any RPM CFLAGS to compiler"),
        ('rpm3-mode', None, "RPM 3 compatibility mode (default)"),
        ('rpm2-mode', None, "RPM 2 compatibility mode"),
        # Add the hooks necessary for specifying custom scripts
        ('prep-script=', None, "Specify a script for the PREP phase of RPM building"),
        ('build-script=', None, "Specify a script for the BUILD phase of RPM building"),
        (
            'pre-install=',
            None,
            "Specify a script for the pre-INSTALL phase of RPM building",
        ),
        (
            'install-script=',
            None,
            "Specify a script for the INSTALL phase of RPM building",
        ),
        (
            'post-install=',
            None,
            "Specify a script for the post-INSTALL phase of RPM building",
        ),
        (
            'pre-uninstall=',
            None,
            "Specify a script for the pre-UNINSTALL phase of RPM building",
        ),
        (
            'post-uninstall=',
            None,
            "Specify a script for the post-UNINSTALL phase of RPM building",
        ),
        ('clean-script=', None, "Specify a script for the CLEAN phase of RPM building"),
        (
            'verify-script=',
            None,
            "Specify a script for the VERIFY phase of the RPM build",
        ),
        # Allow a packager to explicitly force an architecture
        ('force-arch=', None, "Force an architecture onto the RPM build process"),
        ('quiet', 'q', "Run the INSTALL phase of RPM building in quiet mode"),
    ]

    boolean_options = [
        'keep-temp',
        'use-rpm-opt-flags',
        'rpm3-mode',
        'no-autoreq',
        'quiet',
    ]

    negative_opt = {
        'no-keep-temp': 'keep-temp',
        'no-rpm-opt-flags': 'use-rpm-opt-flags',
        'rpm2-mode': 'rpm3-mode',
    }

    def initialize_options(self):
        self.bdist_base = None
        self.rpm_base = None
        self.dist_dir = None
        self.python = None
        self.fix_python = None
        self.spec_only = None
        self.binary_only = None
        self.source_only = None
        self.use_bzip2 = None

        self.distribution_name = None
        self.group = None
        self.release = None
        self.serial = None
        self.vendor = None
        self.packager = None
        self.doc_files = None
        self.changelog = None
        self.icon = None

        self.prep_script = None
        self.build_script = None
        self.install_script = None
        self.clean_script = None
        self.verify_script = None
        self.pre_install = None
        self.post_install = None
        self.pre_uninstall = None
        self.post_uninstall = None
        self.prep = None
        self.provides = None
        self.requires = None
        self.conflicts = None
        self.build_requires = None
        self.obsoletes = None

        self.keep_temp = 0
        self.use_rpm_opt_flags = 1
        self.rpm3_mode = 1
        self.no_autoreq = 0

        self.force_arch = None
        self.quiet = 0

    def finalize_options(self):
        self.set_undefined_options('bdist', ('bdist_base', 'bdist_base'))
        if self.rpm_base is None:
            if not self.rpm3_mode:
                raise DistutilsOptionError("you must specify --rpm-base in RPM 2 mode")
            self.rpm_base = os.path.join(self.bdist_base, "rpm")

        if self.python is None:
            if self.fix_python:
                self.python = sys.executable
            else:
                self.python = "python3"
        elif self.fix_python:
            raise DistutilsOptionError(
                "--python and --fix-python are mutually exclusive options"
            )

        if os.name != 'posix':
            raise DistutilsPlatformError(
                "don't know how to create RPM " "distributions on platform %s" % os.name
            )
        if self.binary_only and self.source_only:
            raise DistutilsOptionError(
                "cannot supply both '--source-only' and '--binary-only'"
            )

        # don't pass CFLAGS to pure python distributions
        if not self.distribution.has_ext_modules():
            self.use_rpm_opt_flags = 0

        self.set_undefined_options('bdist', ('dist_dir', 'dist_dir'))
        self.finalize_package_data()

    def finalize_package_data(self):
        self.ensure_string('group', "Development/Libraries")
        self.ensure_string(
            'vendor',
            "%s <%s>"
            % (self.distribution.get_contact(), self.distribution.get_contact_email()),
        )
        self.ensure_string('packager')
        self.ensure_string_list('doc_files')
        if isinstance(self.doc_files, list):
            for readme in ('README', 'README.txt'):
                if os.path.exists(readme) and readme not in self.doc_files:
                    self.doc_files.append(readme)

        self.ensure_string('release', "1")
        self.ensure_string('serial')  # should it be an int?

        self.ensure_string('distribution_name')

        self.ensure_string('changelog')
        # Format changelog correctly
        self.changelog = self._format_changelog(self.changelog)

        self.ensure_filename('icon')

        self.ensure_filename('prep_script')
        self.ensure_filename('build_script')
        self.ensure_filename('install_script')
        self.ensure_filename('clean_script')
        self.ensure_filename('verify_script')
        self.ensure_filename('pre_install')
        self.ensure_filename('post_install')
        self.ensure_filename('pre_uninstall')
        self.ensure_filename('post_uninstall')

        # XXX don't forget we punted on summaries and descriptions -- they
        # should be handled here eventually!

        # Now *this* is some meta-data that belongs in the setup script...
        self.ensure_string_list('provides')
        self.ensure_string_list('requires')
        self.ensure_string_list('conflicts')
        self.ensure_string_list('build_requires')
        self.ensure_string_list('obsoletes')

        self.ensure_string('force_arch')

    def run(self):  # noqa: C901
        if DEBUG:
            print("before _get_package_data():")
            print("vendor =", self.vendor)
            print("packager =", self.packager)
            print("doc_files =", self.doc_files)
            print("changelog =", self.changelog)

        # make directories
        if self.spec_only:
            spec_dir = self.dist_dir
            self.mkpath(spec_dir)
        else:
            rpm_dir = {}
            for d in ('SOURCES', 'SPECS', 'BUILD', 'RPMS', 'SRPMS'):
                rpm_dir[d] = os.path.join(self.rpm_base, d)
                self.mkpath(rpm_dir[d])
            spec_dir = rpm_dir['SPECS']

        # Spec file goes into 'dist_dir' if '--spec-only specified',
        # build/rpm.<plat> otherwise.
        spec_path = os.path.join(spec_dir, "%s.spec" % self.distribution.get_name())
        self.execute(
            write_file, (spec_path, self._make_spec_file()), "writing '%s'" % spec_path
        )

        if self.spec_only:  # stop if requested
            return

        # Make a source distribution and copy to SOURCES directory with
        # optional icon.
        saved_dist_files = self.distribution.dist_files[:]
        sdist = self.reinitialize_command('sdist')
        if self.use_bzip2:
            sdist.formats = ['bztar']
        else:
            sdist.formats = ['gztar']
        self.run_command('sdist')
        self.distribution.dist_files = saved_dist_files

        source = sdist.get_archive_files()[0]
        source_dir = rpm_dir['SOURCES']
        self.copy_file(source, source_dir)

        if self.icon:
            if os.path.exists(self.icon):
                self.copy_file(self.icon, source_dir)
            else:
                raise DistutilsFileError("icon file '%s' does not exist" % self.icon)

        # build package
        log.info("building RPMs")
        rpm_cmd = ['rpmbuild']

        if self.source_only:  # what kind of RPMs?
            rpm_cmd.append('-bs')
        elif self.binary_only:
            rpm_cmd.append('-bb')
        else:
            rpm_cmd.append('-ba')
        rpm_cmd.extend(['--define', '__python %s' % self.python])
        if self.rpm3_mode:
            rpm_cmd.extend(['--define', '_topdir %s' % os.path.abspath(self.rpm_base)])
        if not self.keep_temp:
            rpm_cmd.append('--clean')

        if self.quiet:
            rpm_cmd.append('--quiet')

        rpm_cmd.append(spec_path)
        # Deten i(e){return(0,r.createTheme)({palette:(0,o.getPalette)(e),semanticColors:(0,o.getSemanticColors)(e)})}t.getThemeForFluent=i,t.loadThemeForFluent=function(e){(0,r.loadTheme)(i(e))},t.getOfficeTheme=function(){if(!window.Office)return"Colorful";try{var e=Office.context.officeTheme;switch(e?e.bodyBackgroundColor.toUpperCase():""){case"#E6E6E6":return"Colorful";case"#666666":return"DarkGray";case"#262626":return"Black";case"#FFFFFF":return"White";default:return"Colorful"}}catch(e){return"Colorful"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadFlights=t.getFlightedNumber=t.getFlightedString=t.getFlightedBool=t.getUnloadedCache=void 0;var r=n(50),o={isLoaded:!1,flights:{}},i={enableDefaultContextMenu:{featureName:"Microsoft.Office.Excel.NavigationPane.EnableDefaultContextMenu",defaultValue:!1},enableObjectTelemetry:{featureName:"Microsoft.Office.Excel.NavigationPane.ObjectTelemetry",defaultValue:!1},objectAddedDeletedEvents:{featureName:"Microsoft.Office.Excel.NavigationPane.ObjectAddedDeletedEvents",defaultValue:!1},useFluentSVRefresh:{featureName:"Microsoft.Office.UXPlatform.FluentSVRefresh",defaultValue:!1},noPolling:{featureName:"Microsoft.Office.Excel.NavigationPane.NoPolling",defaultValue:!1},loadActiveSheetFirst:{featureName:"Microsoft.Office.Excel.NavigationPane.LoadActiveSheetFirst",defaultValue:!1}};t.getUnloadedCache=function(){return{isLoaded:!1,flights:{}}},t.getFlightedBool=function(e){var t=i[e];if("boolean"!=typeof t.defaultValue)throw new Error("Mismatched flighting type.");if(!o.isLoaded)return t.defaultValue;var n=o.flights[e];return"boolean"==typeof n?n:t.defaultValue},t.getFlightedString=function(e){var t=i[e];if("string"!=typeof t.defaultValue)throw new Error("Mismatched flighting type.");if(!o.isLoaded)return t.defaultValue;var n=o.flights[e];return"string"==typeof n?n:t.defaultValue},t.getFlightedNumber=function(e){var t=i[e];if("number"!=typeof t.defaultValue)throw new Error("Mismatched flighting type.");if(!o.isLoaded)return t.defaultValue;var n=o.flights[e];return"number"==typeof n?n:t.defaultValue},t.loadFlights=function(){var e={isLoaded:!1,flights:{}},t=Object.keys(i);return r.xlRequestPool.add((function(){return Excel.run({delayForCellEdit:!0},(function(n){var r=t.map((function(e){var t=i[e],r=t.featureName,o=t.defaultValue;return n.flighting.getFeature(r,function(e){switch(typeof e){case"boolean":return OfficeCore.FeatureType.boolean;case"number":return OfficeCore.FeatureType.integer;case"string":return OfficeCore.FeatureType.string;default:throw new Error("Flighting type must be a string, boolean, or integer")}}(o),o).load("value")}));return n.sync().then((function(){e.isLoaded=!0,t.forEach((function(t,n){var o=r[n];e.flights[t]=o.value}))})).catch((function(){e.flights={},e.isLoaded=!0,t.forEach((function(t){e.flights[t]=i[t].defaultValue}))})).then((function(){o=e}))}))}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.selectNamedRange=t.getIdForName=void 0;var r=n(73),o=n(50);function i(e){switch(e){case Excel.NamedItemScope.workbook:case"Workbook":return"B";case Excel.NamedItemScope.worksheet:case"Worksheet":return"S";default:(0,r.assertNeverAndThrow)(e,"Invalid scope")}}t.getIdForName=function(e,t,n){var r="{CD1DF491-802E-4108-8454-0FDE1FC210F1}";return n?"".concat(r,"[").concat(e,"][").concat(i(t),"][").concat(n,"]"):"".concat(r,"[").concat(e,"][").concat(i(t),"]")},t.selectNamedRange=function(e,t){return o.xlRequestPool.add((function(){return Excel.run({delayForCellEdit:!0},(function(n){return t?n.workbook.worksheets.getItem(t).names.getItem(e).getRange().select():n.workbook.names.getItem(e).getRange().select(),n.workbook.focus(),n.sync()}))}))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return b}));var r=n(1),o=n(0),i=n(254),a=n(25),l=n(55),s=n(542),u=n(9),c=n(543),d=n(21),f=n(136),h=n(255),p=Object(i.a)(),m=Object(a.c)((function(e,t){return Object(f.a)(Object(r.a)(Object(r.a)({},e),{rtl:t}))})),b=o.forwardRef((function(e,t){var n=e.className,i=e.theme,a=e.applyTheme,f=e.applyThemeToBody,b=e.styles,g=p(b,{theme:i,applyTheme:a,className:n}),v=o.useRef(null);return function(e,t,n){var r=t.bodyThemed;o.useEffect((function(){if(e){var t=Object(d.a)(n.current);if(t)return t.body.classList.add(r),function(){t.body.classList.remove(r)}}}),[r,e,n])}(f,g,v),Object(s.b)(v),o.createElement(o.Fragment,null,function(e,t,n,i){var a=t.root,s=e.as,d=void 0===s?"div":s,f=e.dir,p=e.theme,b=Object(u.j)(e,u.h,["dir"]),g=function(e){var t=e.theme,n=e.dir,r=Object(l.a)(t)?"rtl":"ltr",o=Object(l.a)()?"rtl":"ltr",i=n||r;return{rootDir:i!==r||i!==o?i:n,needsTheme:i!==r}}(e),v=g.rootDir,y=g.needsTheme,x=o.createElement(d,Object(r.a)({dir:v},b,{className:a,ref:Object(h.a)(n,i)}));return y&&(x=o.createElement(c.a,{settings:{theme:m(p,"rtl"===f)}},x)),x}(e,g,v,t))}));b.displayName="FabricBase"},function(e,t,n){"use strict";n.d(t,"a",(function(){return m}));var r=n(1),o=n(0),i=n(144),a=n(55),l=n(256),s=n(178),u=function(e){var t=e.item,n=e.classNames,i=t.iconProps;return o.createElement(s.a,Object(r.a)({},i,{className:n.icon}))},c=function(e){var t=e.item;return e.hasIcons?t.onRenderIcon?t.onRenderIcon(e,u):u(e):null},d=function(e){var t=e.onCheckmarkClick,n=e.item,r=e.classNames,a=Object(i.a)(n);return t?o.createElement(s.a,{iconName:!1!==n.canCheck&&a?"CheckMark":"",className:r.checkmarkIcon,onClick:function(e){return t(n,e)}}):null},f=function(e){var t=e.item,n=e.classNames;return t.text||t.name?o.createElement("span",{className:n.label},t.text||t.name):null},h=function(e){var t=e.item,n=e.classNames;return t.secondaryText?o.createElement("span",{className:n.secondaryText},t.secondaryText):null},p=function(e){var t=e.item,n=e.classNames,l=e.theme;return Object(i.c)(t)?o.createElement(s.a,Object(r.a)({iconName:Object(a.a)(l)?"ChevronLeft":"ChevronRight"},t.submenuIconProps,{className:n.subMenuIcon})):null},m=function(e){function t(t){var n=e.call(this,t)||this;return n.openSubMenu=function(){var e=n.props,t=e.item,r=e.openSubMenu,o=e.getSubmenuTarget;if(o){var a=o();Object(i.c)(t)&&r&&a&&r(t,a)}},n.dismissSubMenu=function(){var e=n.props,t=e.item,r=e.dismissSubMenu;Object(i.c)(t)&&r&&r()},n.dismissMenu=function(e){var t=n.props.dismissMenu;t&&t(void 0,e)},Object(l.a)(n),n}return Object(r.c)(t,e),t.prototype.render=function(){var e=this.props,t=e.item,n=e.classNames,r=t.onRenderContent||this._renderLayout;return o.createElement("div",{className:t.split?n.linkContentMenu:n.linkContent},r(this.props,{renderCheckMarkIcon:d,renderItemIcon:c,renderItemName:f,renderSecondaryText:h,renderSubMenuIcon:p}))},t.prototype._renderLayout=function(e,t){return o.createElement(o.Fragment,null,t.renderCheckMarkIcon(e),t.renderItemIcon(e),t.renderItemName(e),t.renderSecondaryText(e),t.renderSubMenuIcon(e))},t}(o.Component)},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(25),o=n(2),i=Object(r.c)((function(e,t,n,r,i){return{root:Object(o.db)(e.splitButtonMenuButton,n&&[e.splitButtonMenuButtonExpanded],t&&[e.splitButtonMenuButtonDisabled],r&&!t&&[e.splitButtonMenuButtonChecked],i&&!t&&[{selectors:{":focus":e.splitButtonMenuFocused}}]),splitButtonContainer:Object(o.db)(e.splitButtonContainer,!t&&r&&[e.splitButtonContainerChecked,{selectors:{":hover":e.splitButtonContainerCheckedHovered}}],!t&&!r&&[{selectors:{":hover":e.splitButtonContainerHovered,":focus":e.splitButtonContainerFocused}}],t&&e.splitButtonContainerDisabled),icon:Object(o.db)(e.splitButtonMenuIcon,t&&e.splitButtonMenuIconDisabled,!t&&i&&e.splitButtonMenuIcon),flexContainer:Object(o.db)(e.splitButtonFlexContainer),divider:Object(o.db)(e.splitButtonDivider,(i||t)&&e.splitButtonDividerDisabled)}}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));var r=n(1),o=n(0),i=n(9),a=n(254),l=Object(a.a)({cacheSize:100}),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Object(r.c)(t,e),t.prototype.render=function(){var e=this.props,t=e.as,n=void 0===t?"label":t,a=e.children,s=e.className,u=e.disabled,c=e.styles,d=e.required,f=e.theme,h=l(c,{className:s,disabled:u,required:d,theme:f});return o.createElement(n,Object(r.a)({},Object(i.j)(this.props,i.h),{className:h.root}),a)},t}(o.Component)},function(e,t,n){"use strict";function r(e){var t={eventName:e.eventName,eventFlags:e.eventFlags};return e.telemetryProperties&&(t.telemetryProperties={ariaTenantToken:e.telemetryProperties.ariaTenantToken,nexusTenantToken:e.telemetryProperties.nexusTenantToken}),e.eventContract&&(t.eventContract={name:e.eventContract.name,dataFields:e.eventContract.dataFields.slice()}),t.dataFields=e.dataFields?e.dataFields.slice():[],t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.d(t,"c",(function(){return $e})),n.d(t,"b",(function(){return Ze})),n.d(t,"a",(function(){return tt}));var r,o,i=n(1),a=n(0),l=n(28),s=n(13),u=n(39),c=n(584),d=n(254),f=n(25),h=n(55),p=n(242),m=n(21),b=n(14),g=n(10),v=n(580),y=n(581),x=n(546),S=n(9),T=n(258),k=n(144),C=n(541),E=n(143),_=n(548);!function(e){e[e.top=1]="top",e[e.bottom=-1]="bottom",e[e.left=2]="left",e[e.right=-2]="right"}(r||(r={})),function(e){e[e.top=0]="top",e[e.bottom=1]="bottom",e[e.start=2]="start",e[e.end=3]="end"}(o||(o={}));var O,w=n(175),A=n(586);function I(e,t,n){return{targetEdge:e,alignmentEdge:t,isAuto:n}}var j=((O={})[s.a.topLeftEdge]=I(r.top,r.left),O[s.a.topCenter]=I(r.top),O[s.a.topRightEdge]=I(r.top,r.right),O[s.a.topAutoEdge]=I(r.top,void 0,!0),O[s.a.bottomLeftEdge]=I(r.bottom,r.left),O[s.a.bottomCenter]=I(r.bottom),O[s.a.bottomRightEdge]=I(r.bottom,r.right),O[s.a.bottomAutoEdge]=I(r.bottom,void 0,!0),O[s.a.leftTopEdge]=I(r.left,r.top),O[s.a.leftCenter]=I(r.left),O[s.a.leftBottomEdge]=I(r.left,r.bottom),O[s.a.rightTopEdge]=I(r.right,r.